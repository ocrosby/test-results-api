name: Release

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write
  actions: write

env:
  NODE_VERSION: 'lts/*'
  PYTHON_VERSION: '3.13'

jobs:
  release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    container:
      image: python:3.12

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
          clean: true

      - name: Configure Git Safe Directory
        run: |
          git config --global --add safe.directory /__w/test-results-api/test-results-api

      - name: Block Unauthorized Direct Push
        run: |
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            AUTHOR=$(git log -1 --pretty=format:'%an')
            if [[ "$AUTHOR" != "github-actions" ]]; then
              echo "‚ùå Direct push to main is not allowed! Only the semantic-release bot can push."
              exit 1
            fi
          fi
        shell: bash

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup
        run: |
          python3 -m venv venv
          source venv/bin/activate
          npm install --no-fund
          python3 -m pip install --upgrade pip
          python3 -m pip install flit invoke build twine
          FLIT_ROOT_INSTALL=1 invoke install
        shell: bash

      - name: Analyze Syntax
        id: syntax
        run: |
          git log -1 --pretty=%B | npx commitlint
          npm run lint
          source venv/bin/activate
          invoke lint
        shell: bash

      - name: Validate Complexity
        id: complexity
        run: |
          source venv/bin/activate
          invoke check-complexity --max-complexity 12
        shell: bash

      - name: Unit Test
        id: unittest
        run: |
          source venv/bin/activate
          invoke test
        shell: bash

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ocrosby/test-results-api

      - name: Run Semantic Release
        id: semantic_release
        if: steps.syntax.conclusion == 'success' && steps.complexity.conclusion == 'success' && steps.unittest.conclusion == 'success'
        env:
          DEBUG: semantic-release:*
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          source venv/bin/activate
          set -e  # Stop on the first error
          npx semantic-release
          echo "version_changed=${{ steps.semantic_release.outputs.version_changed }}"
          echo "outcome=${{ steps.semantic_release.outcome }}"
        shell: bash

      - name: Login to Container Registry
        if: steps.semantic_release.outcome == 'success' && steps.semantic_release.outputs.version_changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build, Tag, and Push Docker Image
        if: steps.semantic_release.outcome == 'success' && steps.semantic_release.outputs.version_changed == 'true'
        run: |
          docker build -t ghcr.io/${{ github.repository }}/test-results-api:latest .
          docker tag ghcr.io/${{ github.repository }}/test-results-api:latest ghcr.io/${{ github.repository }}/test-results-api:${{ steps.semantic_release.outputs.nextRelease.version }}
          docker push ghcr.io/${{ github.repository }}/test-results-api:latest
          docker push ghcr.io/${{ github.repository }}/test-results-api:${{ steps.semantic_release.outputs.nextRelease.version }}
        shell: bash

